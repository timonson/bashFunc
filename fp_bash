# vim: set filetype=sh :

map() {
  local callback elements
  if type "$1" > /dev/null 2>&1; then
    callback="$1"
  else
    eval "_mapCb()${1}" > /dev/null 2>&1 || return 1
    callback=_mapCb
  fi
  if (($# > 1)); then
    elements=("${@:2}")
  else
    mapfile -t elements
  fi
  [ "${#elements[@]}" -eq 1 ] && [ -z "${elements[@]}" ] && return
  for el in "${elements[@]}"; do
    printf "$("$callback" "$el")\n"
  done
}

# map '( echo $(( $1 + 2 )) )' < <(printf "%s\n" 2 3 4 5 6)
# 11
# 12
# 13
# 14
# 15

filter() {
  local callback elements
  if type "$1" > /dev/null 2>&1; then
    callback="$1"
  else
    eval "_filterCb()${1}" > /dev/null 2>&1 || return 1
    callback=_filterCb
  fi
  if (($# > 1)); then
    elements=("${@:2}")
  else
    mapfile -t elements
  fi
  [ "${#elements[@]}" -eq 1 ] && [ -z "${elements[@]}" ] && return
  for el in "${elements[@]}"; do
    "$callback" "$el" && printf "$el\n"
  done
}

# filter '( (( $1 % 2 )) )' < <(printf "%s\n" 1 2 3 4 5)
# 1
# 3
# 5

reduce() {
  local callback elements accelerator
  if type "$1" > /dev/null 2>&1; then
    callback="$1"
  else
    eval "_reduceCb()${1}" > /dev/null 2>&1 || return 1
    callback=_reduceCb
  fi
  if (($# > 2)); then
    elements=("${@:3}")
  else
    mapfile -t elements
  fi
  [ "${#elements[@]}" -eq 1 ] && [ -z "${elements[@]}" ] && return
  accelerator="$2"
  for el in "${elements[@]}"; do
    accelerator="$(printf "$("$callback" "$accelerator" "$el")")"
  done
  printf "$accelerator"
}

# reduce '( echo $(( $1 + $2 )) )' 0 < <(printf "%s\n" 1 2 3 4 5)
# 20

forEach() {
  local callback elements
  if type "$1" > /dev/null 2>&1; then
    callback="$1"
  else
    eval "_forEachCb()${1}" > /dev/null 2>&1 || return 1
    callback=_forEachCb
  fi
  if (($# > 1)); then
    elements=("${@:2}")
  else
    mapfile -t elements
  fi
  [ "${#elements[@]}" -eq 1 ] && [ -z "${elements[@]}" ] && return
  for el in "${elements[@]}"; do
    "$callback" "$el"
  done
}

# forEach '( notify-send $1 )' < <(printf "%s\n" 1 2 3 4 5)

some() {
  local callback elements
  if type "$1" > /dev/null 2>&1; then
    callback="$1"
  else
    eval "_someCb()${1}" > /dev/null 2>&1 || return 1
    callback=_someCb
  fi
  if (($# > 1)); then
    elements=("${@:2}")
  else
    mapfile -t elements
  fi
  [ "${#elements[@]}" -eq 1 ] && [ -z "${elements[@]}" ] && return
  for el in "${elements[@]}"; do
    "$callback" "$el" && return 0
  done
  return 1
}

# some '((( $1 % 2 )))' < <(printf "%s\n" 1 2 3 4 5)
# echo $?
# 0

split() {
  local -a array
  while IFS="$2" read -ra array; do
    for i in "${array[@]}"; do
      printf "%s\n" "$i"
    done
  done <<< "$1"
}

# split 'Hello,World,Good,Evening' ','
# Hello
# World
# Good
# Evening
